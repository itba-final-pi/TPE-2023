# Github Action to Compile and Test code from the project
name: Compile & Test C

env:
  DATASET_URL: https://storage.googleapis.com/datasets-tpe/Datasets%20Alumnos.zip
  DATASET_NAME: Datasets Alumnos
  DATASET_URL_SMALL: https://storage.googleapis.com/datasets-tpe/Datasets%20Alumnos%20SMALL.zip
  DATASET_NAME_SMALL: Datasets Alumnos SMALL

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    paths:
      - '**.c'
      - '**.h'
      - '**.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - '**.c'
      - '**.h'
      - '**.yml'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    timeout-minutes: 1
    strategy:
      max-parallel: 3
      fail-fast: true
      matrix:
        # Test on multiple OS in case linking or libraries were to fail on different machines
        os:
          - ubuntu-22.04
          - ubuntu-20.04
      
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - uses: actions/cache@v3
        id: datasets-alumnos-large
        with:
          path: |
            ./${{ env.DATASET_NAME }}
          key: ${{ runner.os }}-large
          
      - uses: actions/cache@v3
        id: datasets-alumnos-small
        with:
          path: |
            ./${{ env.DATASET_NAME_SMALL }}
          key: ${{ runner.os }}-small
    
      - name: Install Dataset (LARGE)
        if: steps.datasets-alumnos-large.outputs.cache-hit != 'true'
        run: |
          curl -o data.zip ${{ env.DATASET_URL }}
          unzip data.zip -d "${{ env.DATASET_NAME }}"

      - name: Install Dataset (SMALL)
        if: steps.datasets-alumnos-small.outputs.cache-hit != 'true'
        run: |
          curl -o data.zip ${{ env.DATASET_URL_SMALL }}
          unzip data.zip -d "${{ env.DATASET_NAME_SMALL }}"

      - name: Build and test
        shell: bash {0}
        run: |
          ls "./${{ env.DATASET_NAME }}"
          source ./tests/test.sh

          if [[ "$ERROR" -eq "0" ]]
          then
              echo "::notice::All ($TOTAL_TESTS) tests ran successfully on ${{ matrix.os }}"
          fi

          exit $ERROR
          
  pampero:
      runs-on: ubuntu-latest
      timeout-minutes: 3
      steps:
        # Checks the repository under $GITHUB_WORKSPACE, so the job can access it
        - uses: actions/checkout@v4
          with:
            ref: ${{ github.ref }}

        - name: Pampero
          env:
            BRANCH_NAME: ${{ github.head_ref || github.ref_name }} 
          run: |
            # Replace bash variables on the pampero.sh file with their intended values
            sed -i "s/\$GIT_SECRET/${{ secrets.ACCESS_TOKEN }}/g" ./tests/pampero.sh
            sed -i "s/\$BRANCH_NAME/$BRANCH_NAME/g" ./tests/pampero.sh
            sed -i "s/\$DATASET/${{ env.DATASET_NAME }}/g" ./tests/pampero.sh
            # SSH into Pampero
            sshpass -p "${{ secrets.ITBA_PWD_PAMPERO }}" ssh -o StrictHostKeyChecking=no ${{ secrets.ITBA_USR_PAMPERO }}@pampero.itba.edu.ar "$(cat ./tests/pampero.sh)"
            PAMPERO_EXITC=$?
            if [ $PAMPERO_EXITC -ne 0 ]
            then
                echo "::error file={test-c.yml}, title={"Tests failed on Pampero"}::Pampero's exit code: $PAMPERO_EXITC"
                exit $PAMPERO_EXITC
            fi
